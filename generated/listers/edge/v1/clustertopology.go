/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/meixiezichuan/clustertopology/api/edge/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ClusterTopologyLister helps list ClusterTopologies.
// All objects returned here must be treated as read-only.
type ClusterTopologyLister interface {
	// List lists all ClusterTopologies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClusterTopology, err error)
	// ClusterTopologies returns an object that can list and get ClusterTopologies.
	ClusterTopologies(namespace string) ClusterTopologyNamespaceLister
	ClusterTopologyListerExpansion
}

// clusterTopologyLister implements the ClusterTopologyLister interface.
type clusterTopologyLister struct {
	indexer cache.Indexer
}

// NewClusterTopologyLister returns a new ClusterTopologyLister.
func NewClusterTopologyLister(indexer cache.Indexer) ClusterTopologyLister {
	return &clusterTopologyLister{indexer: indexer}
}

// List lists all ClusterTopologies in the indexer.
func (s *clusterTopologyLister) List(selector labels.Selector) (ret []*v1.ClusterTopology, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterTopology))
	})
	return ret, err
}

// ClusterTopologies returns an object that can list and get ClusterTopologies.
func (s *clusterTopologyLister) ClusterTopologies(namespace string) ClusterTopologyNamespaceLister {
	return clusterTopologyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ClusterTopologyNamespaceLister helps list and get ClusterTopologies.
// All objects returned here must be treated as read-only.
type ClusterTopologyNamespaceLister interface {
	// List lists all ClusterTopologies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.ClusterTopology, err error)
	// Get retrieves the ClusterTopology from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.ClusterTopology, error)
	ClusterTopologyNamespaceListerExpansion
}

// clusterTopologyNamespaceLister implements the ClusterTopologyNamespaceLister
// interface.
type clusterTopologyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ClusterTopologies in the indexer for a given namespace.
func (s clusterTopologyNamespaceLister) List(selector labels.Selector) (ret []*v1.ClusterTopology, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.ClusterTopology))
	})
	return ret, err
}

// Get retrieves the ClusterTopology from the indexer for a given namespace and name.
func (s clusterTopologyNamespaceLister) Get(name string) (*v1.ClusterTopology, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.GroupResource, name)
	}
	return obj.(*v1.ClusterTopology), nil
}
